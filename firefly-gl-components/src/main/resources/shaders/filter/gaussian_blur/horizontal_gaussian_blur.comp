#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba16f) uniform writeonly image2D horizontalBlurSceneSampler;

layout (binding = 1, rgba16f) uniform readonly image2D sceneSampler;

const float gaussianKernel9_sigma8[9] = float[9](0.103201,0.108994,0.11333,0.116014,0.116923,0.116014,0.11333,0.108994,0.103201);
const float gaussianKernel9_sigma6[9] = float[9](0.097316,0.107228,0.114921,0.119799,0.121471,0.119799,0.114921,0.107228,0.097316);
const float gaussianKernel9_sigma4[9] = float[9](0.081812,0.101701,0.118804,0.130417,0.134535,0.130417,0.118804,0.101701,0.081812);
const float gaussianKernel9_sigma3[9] = float[9](0.063327,0.093095,0.122589,0.144599,0.152781,0.144599,0.122589,0.093095,0.063327);
const float gaussianKernel9_sigma2[9] = float[9](0.028532,0.067234,0.124009,0.179044,0.20236,0.179044,0.124009,0.067234,0.028532);
const float gaussianKernel9_sigma1[9] = float[9](0.000229,0.005977,0.060598,0.241732,0.382928,0.241732,0.060598,0.005977,0.000229);
const float gaussianKernel5_sigma2[5] = float[5](0.153388,0.221461,0.250301,0.221461,0.153388);

void main(void){

	ivec2 uv = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	
	vec3 rgb = vec3(0);
	ivec2 uvOffset = ivec2(0);
	
	for (int i=-2; i<=2; i++){
		uvOffset = ivec2(i,0);
		rgb += imageLoad(sceneSampler, (uv + uvOffset)).rgb * gaussianKernel5_sigma2[i];
	}
	
	imageStore(horizontalBlurSceneSampler, uv, vec4(rgb, 1.0));
}