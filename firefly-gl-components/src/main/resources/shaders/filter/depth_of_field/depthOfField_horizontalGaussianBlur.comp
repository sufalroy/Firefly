#version 430 core

layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba16f) uniform writeonly image2D horizontalBlurSceneSampler;

layout (binding = 2) uniform sampler2DMS depthmap;
layout (binding = 3) uniform sampler2D sceneSampler;
layout (binding = 4) uniform sampler2D sceneSamplerDownsampled;


uniform float width = 1280;
uniform float height = 720;

const float gaussianKernel9_sigma8[9] = float[9](0.103201,0.108994,0.11333,0.116014,0.116923,0.116014,0.11333,0.108994,0.103201);
const float gaussianKernel9_sigma6[9] = float[9](0.097316,0.107228,0.114921,0.119799,0.121471,0.119799,0.114921,0.107228,0.097316);
const float gaussianKernel9_sigma4[9] = float[9](0.081812,0.101701,0.118804,0.130417,0.134535,0.130417,0.118804,0.101701,0.081812);
const float gaussianKernel9_sigma3[9] = float[9](0.063327,0.093095,0.122589,0.144599,0.152781,0.144599,0.122589,0.093095,0.063327);
const float gaussianKernel9_sigma2[9] = float[9](0.028532,0.067234,0.124009,0.179044,0.20236,0.179044,0.124009,0.067234,0.028532);
const float gaussianKernel9_sigma1[9] = float[9](0.000229,0.005977,0.060598,0.241732,0.382928,0.241732,0.060598,0.005977,0.000229);
const float zfar = 10000.0f;
const float znear = 0.1f;

float linearize(float depth)
{
	return (2 * znear) / (zfar + znear - depth * (zfar - znear));
}

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	
	vec2 uv = vec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y);
	vec2 uvOffset = vec2(0);
	
	// Get the depth buffer value at this pixel.  
	float depth = texelFetch(depthmap, computeCoord, 0).r ; 
	
	float linDepth = linearize(depth);
	
	vec3 color = texture(sceneSampler, vec2(uv.x + 0.5,uv.y + 0.5)/vec2(width,height)).rgb;   
	
	if (linDepth > 0.06) {
		color = vec3(0,0,0);
		for (int i=0; i<9; i++){
			uvOffset = vec2((i-3.5),0.5);
			color += texture(sceneSampler, (uv + uvOffset)/vec2(width,height)).rgb * gaussianKernel9_sigma8[i];
		}
	}
	else if (linDepth > 0.04) {
		color = vec3(0,0,0);
		for (int i=0; i<9; i++){
			uvOffset = vec2((i-3.5),0.5);
			color += texture(sceneSampler, (uv + uvOffset)/vec2(width,height)).rgb * gaussianKernel9_sigma4[i];
		}
	}
	else if (linDepth > 0.02) {
		color = vec3(0,0,0);
		for (int i=0; i<9; i++){
			uvOffset = vec2((i-3.5),0.5);
			color += texture(sceneSampler, (uv + uvOffset)/vec2(width,height)).rgb * gaussianKernel9_sigma2[i];
		}
	}
	
	imageStore(horizontalBlurSceneSampler, computeCoord, vec4(color, 1.0));
}