#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba32f) uniform writeonly image2D heightmap;
layout (binding = 1, rgba32f) uniform writeonly image2D normalmap;

struct Fractal
{
	sampler2D dy;
	sampler2D dx;
	sampler2D dz;
	sampler2D normalmap;
	int scaling;
	float verticalStrength;
	float horizontalStrength;
	int choppy;
};

uniform Fractal fractals[8];
uniform int N;
uniform int edgeElevation;

// shifting and scaling factors
const float EdgeFlatteningInnerVerticalShift = 0.58;
const float EdgeFlatteningInnerVerticalScaling = 0.8;
const float EdgeFlatteningVerticalShift = -0.2;

const float EdgeElevationInnerVerticalShift = 0.0;
const float EdgeElevationInnerVerticalScaling = 1;
const float EdgeElevationVerticalShift = 0.01;

void main(void)
{
	ivec2 x = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = gl_GlobalInvocationID.xy/float(N);
	
	vec3 xyz = vec3(0,0,0);
	vec3 normal = vec3(0,0,0);
	
	for (int i=0; i<8; i++){
			
		if (fractals[i].verticalStrength != 0){
		
			xyz.y += texture(fractals[i].dy, uv*fractals[i].scaling).r * fractals[i].verticalStrength;
			if (fractals[i].choppy == 1){
				xyz.x += texture(fractals[i].dx, uv*fractals[i].scaling).r * fractals[i].horizontalStrength;
				xyz.z += texture(fractals[i].dz, uv*fractals[i].scaling).r * fractals[i].horizontalStrength;
			}
			normal += texture(fractals[i].normalmap, uv*fractals[i].scaling).xyz;
		}
	}
	
	if (edgeElevation == 0)
	{
		xyz.y += EdgeFlatteningInnerVerticalShift;
		xyz.y *= EdgeFlatteningInnerVerticalScaling;
	}
	else if (edgeElevation == 1)
	{
		xyz.y += EdgeElevationInnerVerticalShift;
		xyz.y *= EdgeElevationInnerVerticalScaling;
	}
	
	// compute edge elevation/flattening
	// elevation
	// min graph 0.5*sin(64*(x+pi/128)) + 0.5
	// y = 0 => x = 2 * M_PI / 128
	// y = 1 => x = 0, x = 2 * M_PI / 64
	// max graph 0.5*sin(64*(x+pi/128-1)) + 0.5
	// y = 0 => x = 1 - 2 * M_PI / 128
	// y = 1 => x = 1, x = 1 - 2 * M_PI / 64
	
	// flattening
	// min graph 0.5 * sin(64*(x+3pi/128)) + 0.5
	// y = 0 => x = 0
	// y = 1 => x = 2 * M_PI / 128
	// max graph 0.5 + sin(64*(x+3pi/128-1)) + 0.5
	// y = 0 => x = 1
	// y = 1 => x = 1 - 2 * M_PI / 128
	
	
	float xSlope = 0;
	float zSlope = 0;
	float slope = 0;
	
	float vMinLow = 2.0f * M_PI / 128.0f;
	float vMaxLow = 1.0f - 2.0f * M_PI / 128.0f;
	float vMinHigh = edgeElevation == 1
						? 2.0f * M_PI / 64.0f
						: 2.0f * M_PI / 32.0f;
	float vMaxHigh = edgeElevation == 1
						? 1.0f - 2.0f * M_PI / 64.0f
						: 1.0f - 2.0f * M_PI / 32.0f;
	
	if (uv.x < 0.5)
	{
		xSlope = edgeElevation == 1
			? 0.5 * sin(64*(uv.x + M_PI/128.0)) + 0.5
			: 0.5 * sin(16.0*(uv.x + 3*M_PI/32.0)) + 0.5;
	}
	else
	{
		xSlope = edgeElevation == 1
			? 0.5 * sin(64*(uv.x + M_PI/128.0-1)) + 0.5
			: 0.5 * sin(16.0*(uv.x + 3*M_PI/32.0 -1)) + 0.5;
	}
	if (uv.y < 0.5)
	{
		zSlope = edgeElevation == 1
			? 0.5 * sin(64*(uv.y + M_PI/128.0)) + 0.5
			: 0.5 * sin(16.0*(uv.y + 3*M_PI/32.0)) + 0.5;
	}
	else
	{
		zSlope = edgeElevation == 1
			? 0.5 * sin(64*(uv.y + M_PI/128.0-1)) + 0.5
			: 0.5 * sin(16.0*(uv.y + 3*M_PI/32.0 - 1)) + 0.5;
	}
	
	if (edgeElevation == 1)
	{
		if (uv.x < vMinLow || uv.x > vMaxLow) 
		{
			slope = xSlope;
		}
		else if (uv.y < vMinLow || uv.y > vMaxLow) 
		{
			slope = zSlope;
		}
		else if ((uv.x > vMinLow && uv.x < vMinHigh)||
				 (uv.x > vMaxHigh && uv.x < vMaxLow))
		{
			slope = xSlope;
		}
		else if ((uv.y > vMinLow && uv.y < vMinHigh)||
				 (uv.y > vMaxHigh && uv.y < vMaxLow))
		{
			slope = zSlope;
		}
	}
	else
	{
		if (uv.x < vMinHigh || uv.x > vMaxHigh) 
		{
			slope = xSlope;
		}
		else if (uv.y < vMinHigh || uv.y > vMaxHigh) 
		{
			slope = zSlope;
		}
	}
	
	//--------------- Corners ---------------//
	if (edgeElevation == 1)
	{
		if ((uv.x < vMinLow && uv.y < vMinLow) ||
			(uv.x < vMinLow && uv.y > vMaxLow) ||
			(uv.x > vMaxLow && uv.y < vMinLow) ||
			(uv.x > vMaxLow && uv.y > vMaxLow))
		{
			slope = clamp(xSlope + zSlope, 0, 1);
		}
		if ((uv.x > vMinLow && uv.x < vMinHigh && uv.y > vMinLow && uv.y < vMinHigh) ||
			(uv.x > vMinLow && uv.x < vMinHigh && uv.y > vMaxHigh && uv.y < vMaxLow) ||
			(uv.x > vMaxHigh && uv.x < vMaxLow && uv.y > vMaxHigh && uv.y < vMaxLow) ||
			(uv.x > vMaxHigh && uv.x < vMaxLow && uv.y > vMinLow && uv.y < vMinHigh))
		{
			slope = clamp(xSlope * zSlope, 0, 1);
		}
	}
	else if (edgeElevation == 0)
	{
		if ((uv.x <= vMinHigh && uv.y <= vMinHigh) ||
			(uv.x >= vMaxHigh && uv.y <= vMinHigh) ||
			(uv.x <= vMinHigh && uv.y >= vMaxHigh) ||
			(uv.x >= vMaxHigh && uv.y >= vMaxHigh))
		{
			slope = clamp(xSlope * zSlope, 0, 1);
		}
	}
	//---------------------------------------//
	
	//------------- Inner Field -------------//
	if (uv.x >= vMinHigh && uv.x <= vMaxHigh && uv.y >= vMinHigh && uv.y <= vMaxHigh)
	{
		slope = 1;
	}
	//---------------------------------------//
	
	xyz.y *= slope;
	
	//---------------- Edges ----------------//
	if (edgeElevation == 1)
	{
		if (uv.x < vMinLow || uv.y < vMinLow ||
			uv.x > vMaxLow || uv.y > vMaxLow)
		{
			xyz.y = slope * 0.5f + abs(xyz.y) * 0.5f;
		}
	}
	else if (edgeElevation == 0)
	{
		if (uv.x <= 0 || uv.y <= 0 ||
			uv.x >= 1 || uv.y >= 1)
		{
			xyz.y = 0;
		}
	}
	//---------------------------------------//
	
	if (edgeElevation == 0)
	{
		xyz.y += EdgeFlatteningVerticalShift;
	}
	else if (edgeElevation == 1)
	{
		xyz.y += EdgeElevationVerticalShift;
	}
	
	imageStore(heightmap, x, vec4(xyz, slope));
	imageStore(normalmap, x, vec4(normalize(normal),1));
}