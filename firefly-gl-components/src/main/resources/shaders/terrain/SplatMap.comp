#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0, rgba16f) uniform writeonly image2D splatmap;
layout (binding = 1, rgba32f) uniform readonly image2D heightmap;
layout (binding = 2, rgba32f) uniform readonly image2D normalmap;

const float[2] regions = { 0.2 , 0.5 };

uniform int edgeElevation = 1;
uniform float edgeBorder = 2.0f * M_PI / 128.0f;

void main(void)
{
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	vec2 uvInv = vec2(uv)/float(4096);
	
	vec3 normal = normalize((imageLoad(normalmap, uv).rgb));
	vec4 v_heightmap= imageLoad(heightmap, uv).rgba;
	
	float red = smoothstep(0,1,-5*(v_heightmap.g-regions[0]));

	float green = 0;
	if (v_heightmap.g < regions[0])
		green = smoothstep(1,0,-5*(v_heightmap.g-regions[0]));
	else if (v_heightmap.g >= regions[0] && v_heightmap.g < regions[1])
		green = 1;
	else if (v_heightmap.g >= regions[1])
		green = smoothstep(0,1,-5*(v_heightmap.g-(regions[0]+regions[1])));

	float blue = smoothstep(1,0,-5*(v_heightmap.g-regions[1]));
	
	float steepness = smoothstep(0,1,-32*(normal.z-1));
	
	
	float vMinLow = 2.0f * M_PI / 128.0f;
	float vMaxLow = 1 - 2.0f * M_PI / 128.0f;
	float slope = blue;
	float xSlope = 0;
	float zSlope = 0;
	
	if (edgeElevation == 1)
	{
		if (uvInv.x < vMinLow)
		{
			xSlope = clamp(1 * sin(64*(uvInv.x + M_PI/128.0)) + 1,0,1);
			slope = xSlope;
		}
		if (uvInv.x > vMaxLow)
		{
			xSlope = clamp(1 * sin(64*(uvInv.x + M_PI/128.0-1)) + 1,0,1);
			slope = xSlope;
		}
		if (uvInv.y < vMinLow)
		{
			zSlope = clamp(1 * sin(64*(uvInv.y + M_PI/128.0)) + 1,0,1);
			slope = zSlope;
		}
		if (uvInv.y > vMaxLow)
		{
			zSlope = clamp(1 * sin(64*(uvInv.y + M_PI/128.0-1)) + 1,0,1);
			slope = zSlope;
		}
		if ((uvInv.x < vMinLow && uvInv.y < vMinLow) ||
			(uvInv.x < vMinLow && uvInv.y > vMaxLow) ||
			(uvInv.x > vMaxLow && uvInv.y < vMinLow) ||
			(uvInv.x > vMaxLow && uvInv.y > vMaxLow))
		{
			slope = clamp(xSlope + zSlope, 0, 1);
		}
		
		blue = slope;
	}

	blue = max(blue, steepness);
	red -= red * blue;
	green -= green * blue;
	
	if (edgeElevation == 1)
	{
		if (uvInv.x < vMinLow)
		{
			red += green;
			green = 0;
		}
		if (uvInv.x > vMaxLow)
		{
			red += green;
			green = 0;
		}
		if (uvInv.y < vMinLow)
		{
			red += green;
			green = 0;
		}
		if (uvInv.y > vMaxLow)
		{
			red += green;
			green = 0;
		}
		if ((uvInv.x < vMinLow && uvInv.y < vMinLow) ||
			(uvInv.x < vMinLow && uvInv.y > vMaxLow) ||
			(uvInv.x > vMaxLow && uvInv.y < vMinLow) ||
			(uvInv.x > vMaxLow && uvInv.y > vMaxLow))
		{
			red += green;
			green = 0;
		}
	}
	
	vec4 blendValues = vec4(0,0,0,0);
	
	blendValues.x = red;
	blendValues.y = green;
	blendValues.z = blue;
	blendValues.a = 1.0;
	
	imageStore(splatmap, uv, blendValues);
}